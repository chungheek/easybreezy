{"version":3,"sources":["API/temperatureApi.js","logo.svg","components/Temperature/Temperature.jsx","components/Today/Today.jsx","components/ForecastDay/ForecastDay.jsx","components/WeekForecast/WeekForecast.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Temperature","className","temp","main","Component","Today","weather","feels_like","ForecastDay","day","this","props","pad","dd","String","getDate","padStart","stringDay","getMonth","getFullYear","WeekForecast","Date","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAsBAA,EAAOC,QAlBP,CACE,KAAQ,CACN,KAAQ,OACR,WAAc,OACd,SAAY,OACZ,SAAY,OACZ,SAAY,KACZ,SAAY,IAEd,QACE,CACE,GAAM,IACN,KAAQ,QACR,YAAe,YACf,KAAQ,S,mBClBdD,EAAOC,QAAU,IAA0B,kC,8TCc5BC,G,6KARX,OACE,yBAAKC,UAAU,QACZC,IAAKC,KAAKD,KADb,QACoB,kC,GAJAE,cCaXC,EAZD,WACV,OACA,yBAAKJ,UAAU,mBACX,gDACA,iDACA,2BAAIC,IAAKI,QAAQH,MACjB,kBAAC,EAAD,MACA,0CAAgBD,IAAKC,KAAKI,WAA1B,UCWOC,G,6KAjBZ,IAAMC,EAAMC,KAAKC,MAAMF,IACjBG,EAAMF,KAAKC,MAAMC,IAEnBC,EAAKC,OAAOL,EAAIM,UAAYH,GAAKI,SAAS,EAAG,KAG5CC,EAFKH,OAAOL,EAAIS,WAAa,GAAGF,SAAS,EAAG,KAE3B,IAAMH,EAAK,IADrBJ,EAAIU,cAGf,OACE,yBAAKlB,UAAU,eACbgB,EACA,kBAAC,EAAD,W,GAbkBb,cC4BXgB,G,6KAvBX,IAAIX,EAAM,IAAIY,KAEd,OACE,yBAAKpB,UAAU,YAAf,eAEE,kBAAC,EAAD,CAAaQ,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,IAC5B,6BACA,kBAAC,EAAD,CAAaH,IAAKA,EAAKG,IAAK,S,GAnBTR,cCcZkB,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKsB,IAAKC,IAAMvB,UAAU,WAAWwB,IAAI,aCF/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec59f53f.chunk.js","sourcesContent":["/*\n  Will remove mock data after API has been implemented.\n*/\nconst temp = \n{\n  \"main\": {\n    \"temp\": 295.69,\n    \"feels_like\": 298.13,\n    \"temp_min\": 294.26,\n    \"temp_max\": 297.15,\n    \"pressure\": 1015,\n    \"humidity\": 88\n  },\n  \"weather\": \n    {\n      \"id\": 800,\n      \"main\": \"Clear\",\n      \"description\": \"clear sky\",\n      \"icon\": \"01d\"\n    }\n}\n\nmodule.exports = temp;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport temp from '../../API/temperatureApi';\nimport './styles.scss';\n\nclass Temperature extends Component {\n  render() {\n    return(\n      <div className=\"temp\">\n        {temp.main.temp}° <br />\n      </div>\n    );\n  }\n}\n\nexport default Temperature;\n","import React from 'react';\nimport './Today.scss';\nimport temp from '../../API/temperatureApi';\nimport Temperature from '../Temperature/Temperature';\n\nconst Today = () => {\n    return (\n    <div className=\"today-container\">\n        <h1>Today's Forecast</h1>\n        <p>New York, New York</p>\n        <p>{temp.weather.main}</p>\n        <Temperature />\n        <p>Feels like: {temp.main.feels_like}°</p>\n    </div>\n    )\n};\n\nexport default Today;\n","import React, { Component } from 'react';\nimport Temperature from '../Temperature/Temperature';\nimport './ForecastDay.scss';\n\nclass ForecastDay extends Component {\n  render() {\n  \tconst day = this.props.day;\n  \tconst pad = this.props.pad;\n\n  \tvar dd = String(day.getDate() + pad).padStart(2, '0');\n    var mm = String(day.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = day.getFullYear();\n    var stringDay = mm + '/' + dd + '/' + yyyy;\n\n    return(\n      <div className=\"forecastday\">\n      \t{stringDay}\n        <Temperature />\n      </div>\n    );\n  }\n}\n\nexport default ForecastDay;\n","import React, { Component } from 'react';\n//import Temperature from '../Temperature/Temperature';\nimport ForecastDay from '../ForecastDay/ForecastDay';\nimport './WeekForecast.scss';\n\n// TODO: Each instance of the Temperature component will need\n// to instead be a Day component that will have its own style\nclass WeekForecast extends Component {\n  render() {\n    var day = new Date();\n\n    return(\n      <div className=\"forecast\">\n      \tNext 7 Days:\n        <ForecastDay day={day} pad={1}/>\n        <br/>\n        <ForecastDay day={day} pad={2}/>\n        <br/>\n        <ForecastDay day={day} pad={3}/>\n        <br/>        \n        <ForecastDay day={day} pad={4}/>\n        <br/>\n        <ForecastDay day={day} pad={5}/>\n        <br/>\n        <ForecastDay day={day} pad={6}/>\n        <br/>       \n        <ForecastDay day={day} pad={7}/>\n      </div>\n    );\n  }\n}\n\nexport default WeekForecast;\n","import React from 'react';\nimport HttpsRedirect from 'react-https-redirect'\nimport logo from './logo.svg';\nimport './App.css';\nimport Today from './components/Today/Today';\nimport WeekForecast from './components/WeekForecast/WeekForecast';\n\nfunction App() {\n  return (\n    <HttpsRedirect>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Today />\n          <WeekForecast />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    </HttpsRedirect>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}