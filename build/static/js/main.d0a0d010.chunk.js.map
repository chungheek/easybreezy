{"version":3,"sources":["API/temperatureApi.js","components/FormInput/FormInput.jsx","components/Temperature/Temperature.jsx","components/Today/Today.jsx","components/ForecastDay/ForecastDay.jsx","components/WeekForecast/WeekForecast.jsx","components/CityCountryForm/CityCountryForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormInput","props","state","value","location","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","callBack","className","onSubmit","type","onChange","Component","Temperature","formCallBack","locationData","getForecast","forceUpdateHandler","api","temperature","forceUpdate","url","process","fetch","then","response","json","main","temp","Today","weather","feels_like","ForecastDay","day","pad","dd","String","getDate","padStart","stringDay","getMonth","getFullYear","WeekForecast","Date","CityCountryForm","name","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0a0d010.chunk.js","sourcesContent":["/*\n  Will remove mock data after API has been implemented.\n*/\nconst temp = \n{\n  \"main\": {\n    \"temp\": 295.69,\n    \"feels_like\": 298.13,\n    \"temp_min\": 294.26,\n    \"temp_max\": 297.15,\n    \"pressure\": 1015,\n    \"humidity\": 88\n  },\n  \"weather\": \n    {\n      \"id\": 800,\n      \"main\": \"Clear\",\n      \"description\": \"clear sky\",\n      \"icon\": \"01d\"\n    }\n}\n\nmodule.exports = temp;\n","import React, { Component } from 'react';\n\nclass FormInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n      location: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.callBack(this.state.value);\n  }\n\n  render() {\n    return(\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <label>\n            City Name:\n          </label>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          <input type=\"submit\" value=\"Submit\" />\n        <label>{}</label> {/*TODO: Need to add input validation here */}\n        </form>\n    );\n  }\n}\n\nexport default FormInput;","import React, { Component } from 'react';\nimport './Temperature.scss';\nimport FormInput from '../FormInput/FormInput';\n\nclass Temperature extends Component {\n  constructor() {\n    super();\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n    this.state = {\n      api: [],\n      temperature: 303,\n      location: 'Atlanta'\n    }\n  }\n\n  forceUpdateHandler(){\n    this.forceUpdate();\n  };\n\n  componentDidMount() {\n    this.getForecast();\n  }\n\n  formCallBack = (locationData) => {\n    this.getForecast(locationData);\n  }\n\n  getForecast(location='Atlanta') {\n    const url = process.env.REACT_APP_OPEN_MAP_API_TODAY + location + process.env.REACT_APP_ID;\n    fetch(url)\n    .then(response => response.json())\n    .then(response => {\n      this.setState({\n        location: location,\n        temperature: response.main.temp\n      })\n    })\n  }\n\n  render() {\n    return(\n      <div>\n        <FormInput value=\"Atlanta\" callBack={this.formCallBack}/>\n        <div className=\"temp\">\n          {this.state.temperature}°<br />\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default Temperature;\n","import React from 'react';\nimport './Today.scss';\nimport temp from '../../API/temperatureApi';\nimport Temperature from '../Temperature/Temperature';\n\nconst Today = () => {\n    return (\n    <div className=\"today-container\">\n        <h1>Today's Forecast</h1>\n        <p>New York, New York</p>\n        <p>{temp.weather.main}</p>\n        <Temperature />\n        <p>Feels like: {temp.main.feels_like}°</p>\n    </div>\n    )\n};\n\nexport default Today;\n","import React, { Component } from 'react';\nimport Temperature from '../Temperature/Temperature';\nimport './ForecastDay.scss';\n\nclass ForecastDay extends Component {\n  render() {\n  \tconst day = this.props.day;\n  \tconst pad = this.props.pad;\n\n  \tvar dd = String(day.getDate() + pad).padStart(2, '0');\n    var mm = String(day.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = day.getFullYear();\n    var stringDay = mm + '/' + dd + '/' + yyyy;\n\n    return(\n      <div className=\"forecastday\">\n      \t{stringDay}\n        <Temperature />\n      </div>\n    );\n  }\n}\n\nexport default ForecastDay;\n","import React, { Component } from 'react';\n//import Temperature from '../Temperature/Temperature';\nimport ForecastDay from '../ForecastDay/ForecastDay';\nimport './WeekForecast.scss';\n\n// TODO: Each instance of the Temperature component will need\n// to instead be a Day component that will have its own style\nclass WeekForecast extends Component {\n  render() {\n    var day = new Date();\n\n    return(\n      <div className=\"forecast\">\n      \tNext 7 Days:\n        <ForecastDay day={day} pad={1}/>\n        <br/>\n        <ForecastDay day={day} pad={2}/>\n        <br/>\n        <ForecastDay day={day} pad={3}/>\n        <br/>        \n        <ForecastDay day={day} pad={4}/>\n        <br/>\n        <ForecastDay day={day} pad={5}/>\n        <br/>\n        <ForecastDay day={day} pad={6}/>\n        <br/>       \n        <ForecastDay day={day} pad={7}/>\n      </div>\n    );\n  }\n}\n\nexport default WeekForecast;\n","import React, { Component } from 'react';\nimport './CityCountryForm.scss';\n\nclass CityCountryForm extends Component {\n  render() {\n    return(\n        <form className='city-country-form'>\n            Please enter location: <br/>\n            <input type='text' name='city' />\n            <input type='text' name='country' />\n            <button>Submit</button>\n        </form>\n    );\n  }\n}\n\nexport default CityCountryForm;\n","import React from 'react';\nimport HttpsRedirect from 'react-https-redirect'\nimport './App.css';\nimport Today from './components/Today/Today';\nimport WeekForecast from './components/WeekForecast/WeekForecast';\nimport CityCountryForm from './components/CityCountryForm/CityCountryForm';\n\nfunction App() {\n  return (\n    <HttpsRedirect>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <CityCountryForm />\n          <Today />\n          <WeekForecast />\n        </header>\n      </div>\n    </HttpsRedirect>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}