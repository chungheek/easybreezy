{"version":3,"sources":["API/temperatureApi.js","components/Temperature/Temperature.jsx","components/Today/Today.jsx","components/ForecastDay/ForecastDay.jsx","components/WeekForecast/WeekForecast.jsx","components/CityForm/CityForm.jsx","App.js","components/Toggle/tempScaleConversions.js","serviceWorker.js","index.js"],"names":["module","exports","Temperature","props","temperature","className","Today","temp","weather","main","feels_like","ForecastDay","day","this","pad","dd","String","getDate","padStart","stringDay","getMonth","getFullYear","Component","WeekForecast","Date","CityForm","state","location","value","handleChange","bind","handleSubmit","event","setState","target","preventDefault","callBack","onSubmit","type","onChange","App","formCallBack","locationData","getForecast","forceUpdateHandler","apiResult","Object","tempInK","kelvinToCelsius","forceUpdate","url","process","fetch","then","response","json","catch","console","log","list","convertToFarenheit","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b27a3127.chunk.js","sourcesContent":["/*\n  Will remove mock data after API has been implemented.\n*/\nconst temp = \n{\n  \"main\": {\n    \"temp\": 295.69,\n    \"feels_like\": 298.13,\n    \"temp_min\": 294.26,\n    \"temp_max\": 297.15,\n    \"pressure\": 1015,\n    \"humidity\": 88\n  },\n  \"weather\": \n    {\n      \"id\": 800,\n      \"main\": \"Clear\",\n      \"description\": \"clear sky\",\n      \"icon\": \"01d\"\n    }\n}\n\nmodule.exports = temp;\n","import React from 'react';\nimport './Temperature.scss';\n\nconst Temperature = (props) => {\n  return(\n    (props.temperature &&\n      <div>\n        <div className=\"temp\">\n          {props.temperature}°<br />\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default Temperature;\n","import React from 'react';\nimport './Today.scss';\nimport temp from '../../API/temperatureApi';\nimport Temperature from '../Temperature/Temperature';\n\nconst Today = (props) => {\n    return (\n    <div className=\"today-container\">\n        <h1>Today's Forecast</h1>\n        <p>New York, New York</p>\n        <p>{temp.weather.main}</p>\n        <Temperature temperature={props.temperature} />\n        <p>Feels like: {temp.main.feels_like}°</p>\n    </div>\n    )\n};\n\nexport default Today;\n","import React, { Component } from 'react';\nimport Temperature from '../Temperature/Temperature';\nimport './ForecastDay.scss';\n\nclass ForecastDay extends Component {\n  render() {\n  \tconst day = this.props.day;\n  \tconst pad = this.props.pad;\n\n  \tvar dd = String(day.getDate() + pad).padStart(2, '0');\n    var mm = String(day.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = day.getFullYear();\n    var stringDay = mm + '/' + dd + '/' + yyyy;\n\n    return(\n      <div className=\"forecastday\">\n      \t{stringDay}\n        <Temperature temperature={this.props.temperature}/>\n      </div>\n    );\n  }\n}\n\nexport default ForecastDay;\n","import React, { Component } from 'react';\n//import Temperature from '../Temperature/Temperature';\nimport ForecastDay from '../ForecastDay/ForecastDay';\nimport './WeekForecast.scss';\n\n// TODO: Each instance of the Temperature component will need\n// to instead be a Day component that will have its own style\nclass WeekForecast extends Component {\n  render() {\n    var day = new Date();\n\n    return(\n      (this.props.temperature &&\n        <div className=\"forecast\">\n          Next 7 Days:\n          <ForecastDay day={day} pad={1} temperature={this.props.temperature} />\n          <br/>\n          <ForecastDay day={day} pad={2} temperature={this.props.temperature} />\n          <br/>\n          <ForecastDay day={day} pad={3} temperature={this.props.temperature} />\n          <br/>        \n          <ForecastDay day={day} pad={4} temperature={this.props.temperature} />\n          <br/>\n          <ForecastDay day={day} pad={5} temperature={this.props.temperature} />\n          <br/>\n          <ForecastDay day={day} pad={6} temperature={this.props.temperature} />\n          <br/>       \n          <ForecastDay day={day} pad={7} temperature={this.props.temperature} />\n        </div>\n      )\n    );\n  }\n}\n\nexport default WeekForecast;\n","import React, { Component } from 'react';\nimport './CityForm.scss';\n\nclass CityForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.value,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      location: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.callBack(this.state.location);\n  }\n\n  render() {\n    return(\n      <form className='city-form' onSubmit={this.handleSubmit}>\n        Please enter a city name: <br/>\n        <input type=\"text\" value={this.state.location} onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default CityForm;\n","import React, { Component } from 'react';\nimport HttpsRedirect from 'react-https-redirect'\nimport './App.css';\nimport Today from './components/Today/Today';\nimport WeekForecast from './components/WeekForecast/WeekForecast';\nimport CityForm from './components/CityForm/CityForm';\nimport { kelvinToFahrenheit } from './components/Toggle/tempScaleConversions';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n    this.state = {\n      location: 'Atlanta',\n      temperature: null,\n      apiResult: Object,\n    };\n  \n  }\n\n  convertToFarenheit(temp) {\n    return (temp == null ? null : kelvinToFahrenheit(temp));\n  }\n\n  forceUpdateHandler() {\n    this.forceUpdate();\n  };\n\n  formCallBack = (locationData) => {\n    this.setState({ location: locationData });\n    this.getForecast();\n  }\n\n  getForecast() {\n    const url = process.env.REACT_APP_OPEN_MAP_API + this.state.location + process.env.REACT_APP_ID;\n    fetch(url)\n    .then(response => response.json())\n    .catch(console.log(\"NOT OKAY\"))\n    .then(response => {\n      this.setState({\n        apiResult: response,\n        temperature: response.list[0].temp.day,\n      })\n    }).catch(console.log(\"DEF NOT OKAY\"))\n  }\n\n  render() {\n    return (\n      <HttpsRedirect>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <CityForm value=\"Atlanta\" callBack={this.formCallBack} />\n            <Today temperature={this.convertToFarenheit(this.state.temperature)} />\n            <WeekForecast temperature={this.convertToFarenheit(this.state.temperature)}/>\n          </header>\n        </div>\n      </HttpsRedirect>\n    );\n  }\n}\n\nexport default App;\n","export let fahrenheitToCelsius = (tempInF) => {\n    return (tempInF -32) * 5/9;\n};\n\nexport let celsiusToFahrenheit = (tempInC) => {\n    return (tempInC*9/5 + 32);\n};\n\nexport let kelvinToCelsius = (tempInK) => {\n    return tempInK - 273.15 \n};\n\n//you apparently can't get directly from K to F; you have to convert to C first :)\nexport let kelvinToFahrenheit = (tempInK) => {\n    return celsiusToFahrenheit(kelvinToCelsius(tempInK));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}